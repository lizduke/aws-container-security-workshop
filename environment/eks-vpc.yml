AWSTemplateFormatVersion: 2010-09-09
Description: >-
  Builds a VPC with 3 public and 3 private subnets
Parameters:
  EnvironmentName:
    Description: Environment for the Stack
    Type: String
  BucketName:
    Description: Bucket where templates are stored
    Type: String
  VPCCIDRBlock:
    Description: ' The IP address range used by the New VPC.'
    Type: String
    Default: 10.0.0.0/21
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
  PublicSubnetCIDR1:
    Description: ' Valid Subnet within the New VPC CIDR Range to be used for Public Subnet'
    Type: String
    Default: 10.0.0.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
  PublicSubnetCIDR2:
    Description: ' Valid Subnet within the New VPC CIDR Range to be used for Public Subnet'
    Type: String
    Default: 10.0.1.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
  PublicSubnetCIDR3:
    Description: ' Valid Subnet within the New VPC CIDR Range to be used for Public Subnet'
    Type: String
    Default: 10.0.2.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
  PrivateSubnetCIDR1:
    Description: ' Valid Subnet within the New VPC CIDR Range to be used for Private Subnet'
    Type: String
    Default: 10.0.3.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
  PrivateSubnetCIDR2:
    Description: ' Valid Subnet within the New VPC CIDR Range to be used for Private Subnet'
    Type: String
    Default: 10.0.4.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
  PrivateSubnetCIDR3:
    Description: ' Valid Subnet within the New VPC CIDR Range to be used for Private Subnet'
    Type: String
    Default: 10.0.5.0/24
    AllowedPattern: '(\d{1,3})\.(\d{1,3})\.(\d{1,3})\.(\d{1,3})/(\d{1,2})'
  AZ1:
    Description: The AZ for Public1 and Private1 Subnets
    Type: String
  AZ2:
    Description: The AZ for Public2 and Private2 Subnets
    Type: String
  AZ3:
    Description: The AZ for Public3 and Private3 Subnets
    Type: String
  EKSClusterName:
    Description: The name for your EKS cluster
    Type: String
    Default: EKSDevSec
  KubernetesVersion: 
     Description: The version of k8s deployed to your cluster. Enter 1.20, 1.21 or 1.22, default is 1.22
     Type: String
     Default: 1.22
     AllowedValues:
      - 1.20
      - 1.21
      - 1.22
  EKSIAMRoleName:
    Description: The name for your EKS IAM Role
    Type: String
    Default: EKSClusterRole
Resources:
  StandardVPC:
    Type: 'AWS::EC2::VPC'
    Properties:
      EnableDnsSupport: 'true'
      EnableDnsHostnames: 'true'
      CidrBlock: !Ref VPCCIDRBlock
      Tags:
      - Key: Name
        Value:  !Join ['', [!Ref "AWS::StackName", "-VPC" ]]
  PublicSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref StandardVPC
      AvailabilityZone: !Ref AZ1
      CidrBlock: !Ref PublicSubnetCIDR1
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-1
  PublicSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref StandardVPC
      AvailabilityZone: !Ref AZ2
      CidrBlock: !Ref PublicSubnetCIDR2
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-2
  PublicSubnet3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref StandardVPC
      AvailabilityZone: !Ref AZ3
      CidrBlock: !Ref PublicSubnetCIDR3
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Public-3
  PrivateSubnet1:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref StandardVPC
      AvailabilityZone: !Ref AZ1
      CidrBlock: !Ref PrivateSubnetCIDR1
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-1
      - Key: "kubernetes.io/role/internal-elb"
        Value: 1
  PrivateSubnet2:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref StandardVPC
      AvailabilityZone: !Ref AZ2
      CidrBlock: !Ref PrivateSubnetCIDR2
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-2
      - Key: "kubernetes.io/role/internal-elb"
        Value: 1
  PrivateSubnet3:
    Type: 'AWS::EC2::Subnet'
    Properties:
      VpcId: !Ref StandardVPC
      AvailabilityZone: !Ref AZ3
      CidrBlock: !Ref PrivateSubnetCIDR3
      Tags:
      - Key: Name
        Value: !Sub ${AWS::StackName}-Private-3
      - Key: "kubernetes.io/role/internal-elb"
        Value: 1
  InternetGateway:
    Type: 'AWS::EC2::InternetGateway'
    Properties: {}
  GatewayAttach:
    Type: 'AWS::EC2::VPCGatewayAttachment'
    Properties:
      InternetGatewayId: !Ref InternetGateway
      VpcId: !Ref StandardVPC
  NATGatewayAZ1:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 
        - EIP1
        - AllocationId
      SubnetId: !Ref PublicSubnet1
    DependsOn:
      - PublicRouteTable
  NATGatewayAZ2:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 
        - EIP2
        - AllocationId
      SubnetId: !Ref PublicSubnet2
    DependsOn:
      - PublicRouteTable
  NATGatewayAZ3:
    Type: 'AWS::EC2::NatGateway'
    Properties:
      AllocationId: !GetAtt 
        - EIP3
        - AllocationId
      SubnetId: !Ref PublicSubnet2
    DependsOn:
      - PublicRouteTable
  PvtRTAssocPS1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTableAZ1
      SubnetId: !Ref PrivateSubnet1
  PvtRTAssocPS2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTableAZ2
      SubnetId: !Ref PrivateSubnet2
  PvtRTAssocPS3:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PrivateRouteTableAZ3
      SubnetId: !Ref PrivateSubnet3
  PublicRouteTable:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref StandardVPC
  PublicRoute:
    Type: 'AWS::EC2::Route'
    Properties:
      DestinationCidrBlock: 0.0.0.0/0
      RouteTableId: !Ref PublicRouteTable
      GatewayId: !Ref InternetGateway
  PubRTAssocPS1:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet1
  PubRTAssocPS2:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet2
  PubRTAssocPS3:
    Type: 'AWS::EC2::SubnetRouteTableAssociation'
    Properties:
      RouteTableId: !Ref PublicRouteTable
      SubnetId: !Ref PublicSubnet3
  PrivateRouteTableAZ1:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref StandardVPC
  PrivateRouteTableAZ2:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref StandardVPC
  PrivateRouteTableAZ3:
    Type: 'AWS::EC2::RouteTable'
    Properties:
      VpcId: !Ref StandardVPC
  PrivateRoute1:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTableAZ1
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayAZ1
  PrivateRoute2:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTableAZ2
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayAZ2
  PrivateRoute3:
    Type: 'AWS::EC2::Route'
    Properties:
      RouteTableId: !Ref PrivateRouteTableAZ3
      DestinationCidrBlock: 0.0.0.0/0
      NatGatewayId: !Ref NATGatewayAZ3
  EIP1:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  EIP2:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  EIP3:
    Type: 'AWS::EC2::EIP'
    Properties:
      Domain: vpc
  EKSIAMRole:
    Type: 'AWS::IAM::Role'
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service:
                - eks.amazonaws.com
            Action:
            - 'sts:AssumeRole'
      RoleName: !Ref EKSIAMRoleName
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEKSClusterPolicy
        - arn:aws:iam::aws:policy/AmazonEKSServicePolicy
  ControlPlaneSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Cluster communication with worker nodes
      VpcId: !Ref StandardVPC
  EKSCluster:
    Type: AWS::EKS::Cluster
    Properties:
      Name: !Ref EKSClusterName
      Version: !Ref KubernetesVersion
      RoleArn:
        "Fn::GetAtt": ["EKSIAMRole", "Arn"]
      ResourcesVpcConfig:
        SecurityGroupIds:
        - !Ref ControlPlaneSecurityGroup
        SubnetIds:
        - !Ref PrivateSubnet1 
        - !Ref PrivateSubnet2
        - !Ref PrivateSubnet3
        EndpointPublicAccess: true
        EndpointPrivateAccess: true
      Logging:
        ClusterLogging:
          EnabledTypes:
            - Type: api
            - Type: audit
      Tags:
        - Key: "Name"
          Value: !Ref EKSClusterName
    DependsOn: [EKSIAMRole, PrivateSubnet1, PrivateSubnet2, PrivateSubnet3, ControlPlaneSecurityGroup]
Outputs:
  StackVPC:
    Description: The ID of the VPC
    Value: !Ref StandardVPC
    Export:
      Name: !Sub '${AWS::StackName}-VPCID'
  PrivateSubnet1:
    Description: The IDs of the created subnets.
    Value: !Ref PrivateSubnet1
  PrivateSubnet2:
    Description: The IDs of the created subnets.
    Value: !Ref PrivateSubnet2  
  PrivateSubnet3:
    Description: The IDs of the created subnets.
    Value: !Ref PrivateSubnet3
  EKSClusterName:
    Description: Name of EKS Cluster
    Value: !Ref EKSClusterName